import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Select, Card, Typography } from 'antd';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { fetchSvgCharts } from '../api/fetchSvg';
import { fetchRealtimeData } from '../api/fetchRealtimeData';

const { Option } = Select;
const { Title } = Typography;

const MainPage = () => {
  const [svgComparisonContent, setSvgComparisonContent] = useState(null);
  const [svgDailyTrendContent, setSvgDailyTrendContent] = useState(null);
  const [svgMonthlyAverageBarContent, setSvgMonthlyAverageBarContent] = useState(null);
  const [svgTextFrequencyContent, setSvgTextFrequencyContent] = useState(null);

  const [selectedComparisonParameters, setSelectedComparisonParameters] = useState(['rainfall', 'sunshine']);
  const [selectedDailyTrendParameter, setSelectedDailyTrendParameter] = useState('rainfall');
  const [selectedMonthlyAverageParameter, setSelectedMonthlyAverageParameter] = useState('rainfall');
  const [selectedTextFrequencyParameter, setSelectedTextFrequencyParameter] = useState('windgustdir');

  const [data, setData] = useState([]);
  const [frequency, setFrequency] = useState(10); // –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const token = localStorage.getItem('token');

  // üîπ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const weatherParameters = [
    { value: "mintemp", label: "signal a" },
    { value: "maxtemp", label: "signal b" },
    { value: "rainfall", label: "signal c" },
    { value: "evaporation", label: "signal d" },
    { value: "sunshine", label: "signal e" },
    { value: "windgustspeed", label: "signal f" },
    { value: "windspeed9am", label: "signal g" },
    { value: "windspeed3pm", label: "signal h" },
    { value: "humidity9am", label: "signal i" },
    { value: "humidity3pm", label: "signal j" },
    { value: "pressure9am", label: "signal k" },
    { value: "pressure3pm", label: "signal l" },
    { value: "cloud9am", label: "signal m" },
    { value: "cloud3pm", label: "signal n" },
    { value: "temp9am", label: "signal o" },
    { value: "temp3pm", label: "signal p" },
  ];

  const textParameters = [
    { value: "windgustdir", label: "signal s" },
    { value: "winddir9am", label: "signal t" },
    { value: "winddir3pm", label: "signal u" },
    { value: "raintoday", label: "signal q" },
    { value: "raintomorrow", label: "signal y" },
  ];

  const getLabel = (value) => {
    const all = [...weatherParameters, ...textParameters];
    const found = all.find(p => p.value === value);
    return found ? found.label : value;
  };

  useEffect(() => {
    if (!token) {
      navigate('/');
    } else {
      fetchCharts();
      const fetchData = async () => {
        const fetchedData = await fetchRealtimeData(token);
        if (fetchedData) {
          setData(fetchedData);
        } else {
          setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
      };

      fetchData(); // –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
      const interval = setInterval(fetchData, frequency * 1000);
      return () => clearInterval(interval);
    }
  }, [
    token,
    selectedComparisonParameters,
    selectedDailyTrendParameter,
    selectedMonthlyAverageParameter,
    selectedTextFrequencyParameter,
    frequency,
  ]);

  const fetchCharts = async () => {
    if (loading) return;
    setLoading(true);

    const results = await fetchSvgCharts(
      token,
      selectedComparisonParameters,
      selectedDailyTrendParameter,
      selectedMonthlyAverageParameter,
      selectedTextFrequencyParameter
    );

    if (results.error) {
      setError(results.error);
    } else {
      setSvgComparisonContent(results.comparison || null);
      setSvgDailyTrendContent(results.dailyTrend || null);
      setSvgMonthlyAverageBarContent(results.monthlyAverageBar || null);
      setSvgTextFrequencyContent(results.textFrequency || null);
    }

    setLoading(false);
  };

  // üîπ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ –≤ SVG
  const replaceSvgContent = (svgContent) => {
    if (!svgContent) return '';

    const labelMap = {};
    [...weatherParameters, ...textParameters].forEach(({ value, label }) => {
      labelMap[value] = label;
    });

    let updated = svgContent.replace(
      /<svg([^>]*)>/,
      '<svg$1 width="100%" height="100%" viewBox="0 0 800 600">'
    );

    // –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ label
    Object.entries(labelMap).forEach(([key, label]) => {
      const regex = new RegExp(key, "gi");
      updated = updated.replace(regex, label);
    });

    return updated;
  };

  const WeatherSelect = ({ value, onChange }) => (
    <Select value={value} onChange={onChange} style={{ width: '300px', marginBottom: '10px' }}>
      {weatherParameters.map(({ value, label }) => (
        <Option key={value} value={value}>{label}</Option>
      ))}
    </Select>
  );

  const TextSelect = ({ value, onChange }) => (
    <Select value={value} onChange={onChange} style={{ width: '300px', marginBottom: '10px' }}>
      {textParameters.map(({ value, label }) => (
        <Option key={value} value={value}>{label}</Option>
      ))}
    </Select>
  );

  const handleFrequencyChange = (value) => setFrequency(value);

  // üîπ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Recharts
  const chartData = data.map((item) => ({
    timestamp: item.timestamp,
    value_2: item.temperature,
    value_1: item.humidity,
    value_3: item.windSpeed,
  }));

  const svgStyle = {
    width: '100%',
    height: '100%',
    display: 'block',
    objectFit: 'contain',
  };

  return (
    <div style={{ padding: '20px', maxWidth: '1000px', margin: '0 auto' }}>
      {error && <Title type="danger" level={4}>{error}</Title>}

      {/* üîπ –ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
      <Card title="–ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏" style={{ marginBottom: '20px' }}>
        <Select
          value={frequency}
          onChange={handleFrequencyChange}
          style={{ width: '200px', marginBottom: '20px' }}
        >
          <Option value={5}>5 —Å–µ–∫—É–Ω–¥</Option>
          <Option value={10}>10 —Å–µ–∫—É–Ω–¥</Option>
          <Option value={20}>20 —Å–µ–∫—É–Ω–¥</Option>
          <Option value={30}>30 —Å–µ–∫—É–Ω–¥</Option>
        </Select>

        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="timestamp" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="value_2" name="–û—Å—å X" stroke="#8884d8" />
              <Line type="monotone" dataKey="value_1" name="–û—Å—å Y" stroke="#82ca9d" />
              <Line type="monotone" dataKey="value_3" name="–û—Å—å Z" stroke="#ff7300" />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </Card>

      {/* üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ (SVG) */}
      <Card title="–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤" style={{ marginBottom: '20px' }}>
        <WeatherSelect value={selectedComparisonParameters[0]} onChange={(value) => setSelectedComparisonParameters([value, selectedComparisonParameters[1]])} />
        <WeatherSelect value={selectedComparisonParameters[1]} onChange={(value) => setSelectedComparisonParameters([selectedComparisonParameters[0], value])} />
        <div style={svgStyle} dangerouslySetInnerHTML={{ __html: replaceSvgContent(svgComparisonContent) }} />
      </Card>

      <Card title="–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –¥–Ω—è–º" style={{ marginBottom: '20px' }}>
        <WeatherSelect value={selectedDailyTrendParameter} onChange={setSelectedDailyTrendParameter} />
        <div style={svgStyle} dangerouslySetInnerHTML={{ __html: replaceSvgContent(svgDailyTrendContent) }} />
      </Card>

      <Card title="–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ –º–µ—Å—è—Ü–∞–º" style={{ marginBottom: '20px' }}>
        <WeatherSelect value={selectedMonthlyAverageParameter} onChange={setSelectedMonthlyAverageParameter} />
        <div style={svgStyle} dangerouslySetInnerHTML={{ __html: replaceSvgContent(svgMonthlyAverageBarContent) }} />
      </Card>

      <Card title="–ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤">
        <TextSelect value={selectedTextFrequencyParameter} onChange={setSelectedTextFrequencyParameter} />
        <div style={svgStyle} dangerouslySetInnerHTML={{ __html: replaceSvgContent(svgTextFrequencyContent) }} />
      </Card>
    </div>
  );
};

export default MainPage;
